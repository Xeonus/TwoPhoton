import java.awt.Button;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Panel;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import ij.IJ;
import ij.gui.GenericDialog;
import ij.gui.PolygonRoi;
import ij.gui.Roi;
import ij.gui.ShapeRoi;
import ij.io.DirectoryChooser;
import ij.plugin.PlugIn;
import ij.plugin.frame.RoiManager;

/**
 * This class implements a Plugin used to parse zipped ROI sets to matlab friendly
 * zip files. Any shape-Roi or unsupported ROI type is converted to the according
 * compatible roi type. The plugin is intended to mainly parse data generated by
 * the automatic segmentation algorithm procedure
 * 
 * 
 * @author Alexander van der Bourg, Brain Research Institute Zurich
 * @version 1.0
 * @return parsed ROISet.zip
 */
public class ROI_Parser implements PlugIn{

	//private String zipString;
	private RoiManager zippedRois;
	//private RoiManager toParseRois;
	//private String workDir;
	RoiManager roiwin;
	private String saveDir;
	private int convCount;
	Font f = new Font("dialog", Font.BOLD, 12);
	
	public void renameROIs() {
		RoiManager rm = RoiManager.getInstance();
		int rCount = rm.getCount();
		for (int i = 0; i < rCount; i++) {
			rm.select(i);
			if (i <= 8) {
				rm.runCommand("Rename", "0" + Integer.toString(i+1));
			} else {
				rm.runCommand("Rename", Integer.toString(i+1));
			}
		}
	}
	
	public void parseShapes(Roi [] roiArray) {
		List<Roi> parsedRois = new ArrayList<Roi>();
		for (Roi roi : roiArray){
			//Single ROIs can be packed in ShapeROIs
			//which is hard to extract in Matlab.
			if (roi instanceof ShapeRoi) {
				 ShapeRoi shapeRoi = (ShapeRoi)roi;
	                Roi[] rois = shapeRoi.getRois(); 
	                for (Roi roi2 : rois){
	                	parsedRois.add(roi2);
	                }
	                convCount+=1;
			}
			//Convert traced types to readable PolygonRois
			if (roi.getTypeAsString() == "Traced") {
				//Create a new polygonroi and overwrite the current roi
				PolygonRoi pRoi = new PolygonRoi(roi.getInterpolatedPolygon(), 3);
				parsedRois.add(pRoi);
				convCount +=1;
				
			}
			else {
				parsedRois.add(roi);
			}
		}
		
		//Update the new RoiManager with desired list
		RoiManager rm = RoiManager.getInstance();
		rm.close();
		RoiManager parsedManager = new RoiManager();
		for (int i=0; i<parsedRois.size(); i++){
			parsedManager.addRoi(parsedRois.get(i));
		}
	}
	
	@Override
	public void run(String arg) {
		if (IJ.versionLessThan("1.34p"))
			return;
		
		final String ROIString = "ROIs in .zip format";

		Panel flowPanel = new Panel(new FlowLayout());
		Panel myLoadPanel = new Panel(new GridLayout(2, 1));
		final Button loadROIButton = new Button("Load ROIs");
		Panel myTextPanel = new Panel(new GridLayout(2, 1));
		final TextField ROIField = new TextField(ROIString, 30);
		
		// Select output folder
		Panel directoryPanel = new Panel(new FlowLayout());
		Panel myDirectoryPanel = new Panel(new GridLayout(2, 1));
		final Button loadDirectoryButton = new Button("Save To:");
		Panel directoryTextPanel = new Panel(new GridLayout(2, 1));
		final TextField directoryField = new TextField("Path to save converted files", 30);
		
		// Directory panel
		directoryTextPanel.add(directoryField);
		myDirectoryPanel.add(loadDirectoryButton);
		directoryPanel.add(myDirectoryPanel);
		directoryPanel.add(directoryTextPanel);

		myTextPanel.add(ROIField);
		myLoadPanel.add(loadROIButton);
		flowPanel.add(myLoadPanel);
		flowPanel.add(myTextPanel);

		loadROIButton.addActionListener(new ActionListener() {
			@Override
			@SuppressWarnings("static-access")
			public void actionPerformed(ActionEvent e) {
				IJ.showStatus("Loading ROIs");
				// close all previous RoiManagers
				if (RoiManager.getInstance() != null) {
					RoiManager rm = RoiManager.getInstance();
					rm.close();
				}
				// Create new one
				roiwin = new RoiManager();
				IJ.open();
				zippedRois = roiwin.getInstance();
				int count = roiwin.getCount();
				String scount = Integer.toString(count);
				ROIField.setText(scount + " ROIs loaded");
			}
		});
		
		loadDirectoryButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				IJ.showStatus("Choose output direcotry");
				DirectoryChooser dirC = new DirectoryChooser(
						"Select output path");
				saveDir = dirC.getDirectory();

				directoryField.setText(saveDir);
			}
		});
		
		// Generate dialog box
				GenericDialog gd = new GenericDialog(
						"ROI Parser Tool", IJ.getInstance());
				gd.addMessage("Convert a Roi-Set:", f);
				gd.addPanel(flowPanel);
				gd.addMessage("After loading the Roi-set press OK to parse it");
				//gd.addPanel(directoryPanel);
				gd.showDialog();

				if (gd.wasCanceled())
					return;
				
				//Parse ROIs
				parseShapes(zippedRois.getRoisAsArray());
				//Rename ROIs
				renameROIs();
				IJ.log("ROIs have been renamed");
				
				//Notify user
				if (convCount ==0 ){
					IJ.log("No ROIs had to be converted!");
				}
				else {
					IJ.log(Integer.toString(convCount)+" ROIs converted successfully");
				}
				
				
				//At the moment, there is no proper way to retrieve the source path of the openend zip file
				//RoiManager rm = RoiManager.getInstance();
				//rm.runCommand("Save", saveDir+"Parsed_RoiSet.zip");

				}
		
		
		
		
}
